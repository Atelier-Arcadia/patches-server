'''Data classes representing the core types handled by Patches.
'''

from dataclasses import dataclass
from enum import Enum
import json
from typing import List


class Severity(Enum):
    '''Enumerates each severity level that a vulnerability can be ranked as
    having.
    '''

    UNKNOWN = 0
    NEGLIGIBLE = 1
    LOW = 2
    MEDIUM = 3
    HIGH = 4
    URGENT = 5
    CRITICAL = 6

    def to_string(self):
        '''Produce a textual representation of a Severity.
        '''

        mapping = {
            UNKNOWN: 'unknown',
            NEGLIGIBLE: 'negligible',
            LOW: 'low',
            MEDIUM: 'medium',
            HIGH: 'high',
            URGENT: 'urgent',
            CRITICAL: 'critical',
        }

        return mapping[self]


@dataclass
class Package:
    '''Represents a package containing a fix for a vulnerability.
    '''

    name: str
    version: str

    def to_json(self):
        '''Convert a Package into its JSON representation.
        '''

        return json.dumps({
            'name': self.name,
            'version': self.version,
        })


@dataclass
class Vulnerability:
    '''Represents a vulnerability affecting a package built for a platform.
    '''

    name: str
    affected_platform: str
    details_href: str
    severity: Severity
    fixed_in: List[Package]

    def to_json(self):
        '''Convert a Vulnerability into its JSON representation.
        '''

        return json.dumps({
            'name': self.name,
            'affectedPlatform': self.affected_platform,
            'detailsHref': self.details_href,
            'severity': self.severity.to_string(),
            'fixedIn': [ package.to_json() for package in self.fixed_in ],
        })