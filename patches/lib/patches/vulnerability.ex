defmodule Patches.Vuln do
  @moduledoc """
  A description of a vulnerability that affects a software package.
  """

  defstruct name: "", affected_package: "", affected_platform: "", details_href: "", severity: 0, fixed_in: []
end

defmodule Patches.VulnFn do
  @moduledoc """
  Pure functions for uperating on the `Patches.Vuln` struct type.
  """

  alias Patches.Severity

  def from_json(json, platform) do
    retr_keys = %{
      name: fn js -> Map.get(js, "Name") end,
      affected_package: fn js ->
        js
        |> Map.get("FixedIn")
        |> Enum.index(0)
        |> Map.get("Name")
      end,
      affected_platform:, fn _js -> platform end,
      details_href:, fn js -> Map.get(js, "Link") end,
      severity:, fn js ->
        js
        |> Map.get("Severity")
        |> severity_from_name
      end,
      fixed_in:, fn js ->
        js
        |> Map.get("FixedIn")
        |> Enum.map(package_from_json)
      end
    }

    %Patches.Vuln{
      name: retr_keys.name.(json),
      affected_package: retr_keys.affected_package.(json),
      affected_platform: retr_keys.affected_platform.(json),
      details_href: retr_keys.details_href.(json),
      severity: retr_keys.severity.(json),
      fixed_in: retr_keys.fixed_in.(json),
    }
  end

  defp severity_from_name(name) do
    mapping = %{
      "negligible" => Severity.negligible,
      "low"        => Severity.low,
      "medium"     => Severity.medium,
      "high"       => Severity.high,
      "critical"   => Severity.critical,
      "urgent"     => Severity.urgent
    }
    Map.get(mapping, String.downcase(name), Severity.unknown)
  end

  defp package_from_json(json) do
    %{
      name: Map.get(json, "Name", ""),
      version: Map.get(json, "Version", "")
    }
  end
end
